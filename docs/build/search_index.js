var documenterSearchIndex = {"docs":
[{"location":"index.html#VehicleRoutingProblems","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems","text":"","category":"section"},{"location":"index.html","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems","text":"Modules = [VehicleRoutingProblems]\r\nOrder   = [:function]","category":"page"},{"location":"index.html#VehicleRoutingProblems.create_conclution_opt_solomon-Tuple{}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.create_conclution_opt_solomon","text":"create_conclution_opt_solomon()\n\nCreate the csv file contain all solomon instances r101-rc208 Output name: data/optsolomon/`nametype(r1, r2, ...)/name-num_customer`\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.create_csv_min_all_distance-Tuple{}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.create_csv_min_all_distance","text":"create_csv_min_all_distance()\n\ncreate csv file contains minimum distance of all runs using PSO\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.dataframe_group_opt_solomon-Tuple{DataFrames.DataFrame}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.dataframe_group_opt_solomon","text":"dataframe_group_opt_solomon(df::DataFrames)\n\nFind the group by the number of customers (25, 50, 100) of solomon instances\n\nReturn 3 groups of isntances gb[1], gb[2], gb[3] Each group will contain all instrnce of name_type \n\nFor example:\n\n if name_type is `r1` each group will have r101, r102, ..., r112\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.dataframe_opt_solomon-Tuple{String}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.dataframe_opt_solomon","text":"dataframe_opt_solomon(name_type::String)\n\nFind the group by the number of customers (25, 50, 100) of solomon instances\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.heuristic_single_min-Tuple{}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.heuristic_single_min","text":"try to rearrenge sch by processing time.   input::   if all_jobs is [] means condidates are 1, 2, ..., n Returns:     array â€“ sch that can not be processed in time.\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.point_distance-Tuple{Any, Any}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.point_distance","text":"point_distance(p1, p2)\n\np1: coordiante point in the form of [x1, y1]\np2: coordiante point in the form of [x2, y2]\n\nReturn euclidian distance from (x1, y1) -> (x2, y2)\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.read_route-Tuple{String}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.read_route","text":"read_route(file_name::String)\n\nreturn route representation from file text\n\nFor example: \n\n\n\nText file\n\n1 2 4 5\n\n8 9 3 6\n\n\n\nReturn Vector[0, 1, 2, 4, 5, 0, 8, 9, 3, 6, 0] where 0 represented depot\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.seperate_route-Tuple{Solution}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.seperate_route","text":"seperate_route(solution::Solution)\n\nreturn Vector of route with length = number of vehicles\n\nExample\n\nsolution = read_solution(\"particle_swarm\\total_distance\\case1\\r101\\15\\1\\r101-1.txt\", \"r101\")\nseperate_route(solution)\n\n\n\n\n\n","category":"method"},{"location":"index.html#VehicleRoutingProblems.total_route-Tuple{Solution}","page":"VehicleRoutingProblems","title":"VehicleRoutingProblems.total_route","text":"total_route(solution::Solution)\n\nReturn the number of route\n\n\n\n\n\n","category":"method"}]
}
